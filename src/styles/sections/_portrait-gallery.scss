// src/styles/sections/_portrait-gallery.scss
@import '../variables';
@import '../mixins';

.case-study-detail-section { // Reusing general case study styling for consistency

  .carousel-container {
    position: relative;
    width: 100%;
    max-width: 900px;
    margin: $spacing-xxl auto; // Use spacing variable
    overflow: hidden;
    border-radius: $border-radius-md; // Medium border-radius
    box-shadow: $shadow-deep; // Deeper shadow
    background-color: $secondary-background; // Secondary background for carousel
    border: 1px solid $border-dark; // Subtle border
  }

  .carousel-track {
    display: flex;
    transition: transform 0.5s ease-in-out;
    width: 100%; /* Each slide is 100% of container width */
  }

  .carousel-slide {
    flex: 0 0 100%; /* Each slide takes full width */
    height: 700px; /* Increased height for portrait orientation */
    @media (min-width: 768px) {
      height: 800px; /* Even taller on desktop */
    }
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
  }

  .carousel-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
    border-radius: $border-radius-sm; // Smaller border-radius
  }

  .carousel-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba($primary-background, 0.6);
    color: $accent-blue;
    border: none;
    padding: $spacing-md $spacing-lg;
    cursor: pointer;
    font-size: 1.5rem;
    border-radius: $border-radius-md;
    transition: background-color $transition-speed $transition-ease, box-shadow $transition-speed $transition-ease;
    z-index: 10;

    &:hover {
      background-color: rgba($primary-background, 0.8);
      box-shadow: $shadow-glow;
    }

    &--prev {
      left: $spacing-md;
    }

    &--next {
      right: $spacing-md;
    }
  }

  .carousel-dots {
    position: absolute;
    bottom: $spacing-md;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 0.5rem;

    .carousel-dot {
      width: 0.75rem;
      height: 0.75rem;
      background-color: rgba($text-primary, 0.5);
      border-radius: 50%;
      cursor: pointer;
      transition: background-color $transition-speed $transition-ease;

      &.active {
        background-color: $accent-green; // Active dot color
        box-shadow: $shadow-glow;
      }

      &:hover:not(.active) {
        background-color: rgba($text-primary, 0.8);
      }
    }
  }

  .asymmetric-gallery {
    display: grid;
    // Responsive columns, allowing images to roughly maintain portrait aspect
    grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
    grid-auto-rows: 220px; // A base height for rows, which some images will span
    grid-auto-flow: dense; // Fills in gaps for a tighter pack
    gap: 2px;
    margin-top: $spacing-xxl; // Use spacing variable
    margin-bottom: $spacing-xxl; // Use spacing variable

    @media (min-width: 768px) {
      grid-template-columns: repeat(3, 1fr); // Max 3 columns on desktop
    }
    @media (min-width: 1024px) {
      grid-template-columns: repeat(3, 1fr); // Max 3 columns on larger screens
    }

    .gallery-image {
      width: 100%;
      height: 100%; // Image will fill its grid area
      object-fit: cover; // Maintains aspect ratio and covers the area
      border-radius: 0; // Removed border-radius
      box-shadow: $shadow-sm;
      transition: transform $transition-speed $transition-ease, box-shadow $transition-speed $transition-ease;

      &:hover {
        box-shadow: $shadow-glow;
        z-index: 5;
      }
    }

    /* Apply random-like row spans for asymmetry */
    /* These will make certain images taller, creating a dynamic layout.
       The :nth-child patterns are chosen to create a varied, non-repeating feel,
       while 'grid-auto-flow: dense' minimizes gaps by filling in smaller items. */
    .gallery-image:nth-child(3n + 1) { /* Every 3rd image (1st, 4th, 7th...) */
      grid-row: span 2; /* Make it span 2 rows vertically */
    }

    .gallery-image:nth-child(5n + 2) { /* Every 5th image (2nd, 7th, 12th...) */
      grid-row: span 3; /* Make it span 3 rows for a larger portrait feature */
    }

    .gallery-image:nth-child(7n + 4) { /* Every 7th image (4th, 11th...) - another variant */
      grid-column: span 2; /* Span 2 columns to create a wider element */
      grid-row: span 2; /* And 2 rows tall */
    }


    /* Reset for smaller screens if spans become problematic, ensuring uniform items
       to prevent overflow issues and better stacking on small viewports. */
    @media (max-width: 767px) {
      .gallery-image:nth-child(3n + 1),
      .gallery-image:nth-child(5n + 2),
      .gallery-image:nth-child(7n + 4) {
        grid-column: span 1; // Revert to single column
        grid-row: span 1;   // Revert to single row
        height: 250px;      /* Uniform height for mobile for better stacking */
      }
      grid-auto-rows: 250px; /* Uniform base row height for mobile to avoid issues */
    }
  }
}
